/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attentionb
 *
 * <h2><center>&copy; Copyright (c) 2023 STMicroelectronics.
 * All rights reserved.</center></h2>
 *
 * This software component is licensed by ST under BSD 3-Clause license,
 * the "License"; You may not use this file except in compliance with the
 * License. You may obtain a copy of the License at:
 *                        opensource.org/licenses/BSD-3-Clause
 *
 ******************************************************************************
 */

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
#warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

#include <stdio.h>

#define AB2ENR *((volatile unsigned int*)(0x40021000+0x18))
#define GPIOA_CRH (0x40010800+0x04)
#define GPIOA_ODR (0x40010800+0x0c)
#define EXTI_BASE (0X40010400)
#define EXTI_IMR *(volatile unsigned int*)(EXTI_BASE + 0X00)
#define EXTI_RTSR *(volatile unsigned int*)(EXTI_BASE + 0X08)
#define EXTI_PR *(volatile unsigned int*)(EXTI_BASE + 0X14)
#define AFIO_BASE (0X40010000)
#define AFIO_EXTCR1 *(volatile unsigned int*)(AFIO_BASE + 0X08)
#define GPIOA_CRL *(volatile unsigned int*)(0x40010800+0x00)
#define NVIC_EXTIE0 *(volatile unsigned int*)(0xE000E100+0x00)

typedef union {
	volatile unsigned int allbytes;
	struct{
		volatile unsigned int reserved:20;
		volatile unsigned int bit1:8;

	}Sgpioa_CRH;
}Ugpioa_CRH;

typedef union {
	volatile unsigned int allbytes;
	struct{
		volatile unsigned int reserved:13;
		volatile unsigned int PORTA:1;
	}Sgpioa_ODR;
}Ugpioa_ODR;

volatile Ugpioa_CRH* PTR_CRH=(volatile Ugpioa_CRH*)(GPIOA_CRH);
volatile Ugpioa_ODR* PTR_ODR=(volatile Ugpioa_ODR*)(GPIOA_ODR);

void clock_init(){
	AB2ENR |=1<<2;
	AB2ENR |= 1<<0;

}

void GPIO_init(){
	PTR_CRH->allbytes=1;
	PTR_CRH->Sgpioa_CRH.bit1=0x02;
	GPIOA_CRL |=1<<2;
}

int main(){
	GPIO_init();
	clock_init();
	AFIO_EXTCR1 = 0;
	EXTI_RTSR |= (1<<0);
	EXTI_IMR |= (1<<0);
	NVIC_EXTIE0 |= (1<<6);
	while(1);
}

void EXTI0_IRQHandler(){
		//int i = 0;
		//for(i = 0 ; i<5000 ;i++);
		PTR_ODR->Sgpioa_ODR.PORTA ^= 1;
		//for(i = 0 ; i<5000 ;i++);
		//PTR_ODR->Sgpioa_ODR.PORTA=0;
		EXTI_PR |=(1<<0);
	}

